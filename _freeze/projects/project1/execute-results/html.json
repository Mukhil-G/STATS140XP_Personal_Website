{
  "hash": "bff6bc212a5d7fbae2e2ba4de89999fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Project 1\"\n---\n\n---\ntitle: \"140_Baseball_Project_EDA2\"\noutput: pdf_document\ndate: \"2025-03-07\"\n---\n\n\n\n\n\n### Exploratory Data Analysis on UCLA Men's Baseball Team -> Researching if the order in which pitches are thrown relate to the amount of swings and misses?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gtable)\nlibrary(condformat)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(gridExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'gridExtra' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'gridExtra'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    combine\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(grid)\n\nsource(\"baseballfunctions.R\")\n\nfull_data <- read.csv('5_18_thru.csv')\nucla <- full_data %>%\n  filter(PitcherTeam == \"UCLA\")\nucla$PLH <- ucla$PlateLocHeight*12\nucla$PLS <- ucla$PlateLocSide*12\n\ncleaned <- ucla %>%\n  filter(!TaggedPitchType == \"Other\")\n\ncleaned <- cleaned %>%\n  mutate(TaggedPitchType = if_else(TaggedPitchType == \"Sinker\", \"Fastball\", TaggedPitchType)) %>% \n  mutate(TaggedPitchType = if_else(TaggedPitchType == \"Slider\", \"Breaking Ball\", TaggedPitchType)) %>% \n  mutate(TaggedPitchType = if_else(TaggedPitchType == \"Curveball\", \"Breaking Ball\", TaggedPitchType)) %>% \n  mutate(TaggedPitchType = if_else(TaggedPitchType == \"Sweeper\", \"Breaking Ball\", TaggedPitchType)) %>% \n  mutate(TaggedPitchType = if_else(TaggedPitchType == \"ChangeUp\", \"Off-Speed\", TaggedPitchType))\n  \n\nbot_margin <- textGrob(\"\", gp = gpar(fontsize = 10, col = \"white\"))\n\npitch_order <- c(\"Fastball\", \"Breaking Ball\", \"Off-Speed\")\n\nheight_arr <- c(1/20,rep((19/20)/11, times = 11))\nheight_arr6 <- c(1/20,rep((19/20)/13, times = 13))\nheight_arr7 <- c(1/20,rep((19/20)/15, times = 15))\n\nafter_pitch <- function(pitches, pitch) {\n  seq <- pitches %>% dplyr::select(everything()) %>% slice(0)\n  res <- data.frame(pitchtype = character(),\n                    total = numeric(),\n                    perc = numeric(),\n                    strikes = numeric(),\n                    swung = numeric(),\n                    csw = numeric(),\n                    whiff = numeric(),\n                    chase = numeric(),\n                    BIP = numeric(),\n                    BIPout = numeric(),\n                    gb = numeric(),\n                    ld = numeric(),\n                    fb = numeric(),\n                    zswing = numeric(),\n                    zwhiff = numeric())\n  \n  for (p in 1:nrow(pitches)) {\n    if (pitches[p,\"TaggedPitchType\"] == pitch & pitches[p+1, \"PitchofPA\"] != 1 & p < nrow(pitches)){\n      seq <- rbind(seq, pitches[p+1,])\n    }\n  }\n  \n  for (i in 1:length(unique(seq$TaggedPitchType))) {\n    type <- unique(seq$TaggedPitchType)[i]\n    z <- filter(seq, TaggedPitchType == type)\n    new <- data.frame(\n      pitchtype = type,\n      total = nrow(z),\n      perc = round((nrow(z)/nrow(seq))*100, digits = 2),\n      strikes = round((nrow(filter(z, PitchCall %in% strike))/nrow(z))*100, digits = 2),\n      swung = round((nrow(filter(z, PitchCall %in% swung))/nrow(z))*100, digits = 2),\n      csw = round(((nrow(filter(z, PitchCall %in% strike))-nrow(filter(z, PitchCall %in% swung))+nrow(filter(z,PitchCall == \"StrikeSwinging\")))/nrow(z))*100, digits = 2),\n      whiff = whiff(z),\n      chase = chase(z),\n      BIP = round((nrow(filter(z, PitchCall == \"InPlay\"))/nrow(z))*100, digits = 2),\n      BIPout = round((nrow(filter(z, PlayResult == \"Out\" | (PlayResult == \"FieldersChoice\" & OutsOnPlay >= 1)))/nrow(filter(z, PitchCall == \"InPlay\")))*100, digits = 2),\n      gb = gb_p(z),\n      ld = ld_p(z),\n      fb = fb_p(z),\n      zswing = zone_swing(z),\n      zwhiff = zone_whiff(z)\n    )\n    res <- rbind(res,new)\n  }\n  res$pitchtype <- factor(res$pitchtype, levels = pitch_order)\n  res <- res[order(res$pitchtype), ]\n  colnames(res) <- c(\"Pitch Type\",\n                     \"#\",\n                     \"%\",\n                     \"K%\",\n                     \"Swing%\",\n                     \"CSW%\",\n                     \"Whiff%\",\n                     \"Chase%\",\n                     \"BIP%\",\n                     \"BIPOut%\",\n                     \"GB%\",\n                     \"LD%\",\n                     \"FB%\",\n                     \"IZ Swing%\",\n                     \"IZ Whiff%\")\n  return (res)\n}\n\ncondGrob <- function(table1, fsize){\n  fin <- condformat(table1) %>%\n    theme_grob(\n      rows = NULL,\n      theme = ttheme_default(core = list(fg_params = list(cex = fsize)),\n                             colhead = list(fg_params = list(cex = fsize)))\n    ) %>%\n    rule_fill_discrete(\n      columns = `Pitch Type`,\n      expression = TRUE,\n      colours = c(\"White\")\n    ) %>%\n    rule_fill_discrete(\n      columns = `#`,\n      expression = TRUE,\n      colours = c(\"White\")\n    ) %>%\n    rule_fill_discrete(\n      columns = `%`,\n      expression = TRUE,\n      colours = c(\"White\")\n    ) %>%\n    rule_fill_discrete(\n      columns = `Swing%`,\n      expression = TRUE,\n      colours = c(\"White\")\n    ) %>%\n    rule_fill_discrete(\n      columns = `BIP%`,\n      expression = TRUE,\n      colours = c(\"White\")\n    ) %>%\n    rule_fill_discrete(\n      columns = `GB%`,\n      expression = TRUE,\n      colours = c(\"White\")\n    ) %>%\n    rule_fill_discrete(\n      columns = `LD%`,\n      expression = TRUE,\n      colours = c(\"White\")\n    ) %>%\n    rule_fill_discrete(\n      columns = `FB%`,\n      expression = TRUE,\n      colours = c(\"White\")\n    ) %>%\n    rule_fill_discrete(\n      columns = `IZ Swing%`,\n      expression = TRUE,\n      colours = c(\"White\")\n    ) %>%\n    rule_fill_discrete(\n      columns = `CSW%`,\n      expression = cut(`CSW%`,\n                       breaks = c(-Inf,21,25,27,30,Inf),\n                       labels = c('Dark Red','Light Red','White','Light Green','Dark Green')),\n      colours = c(\"Dark Red\" = \"#FF6666\",\n                  \"Light Red\" = \"#FFB3B3\",\n                  \"White\" = \"white\",\n                  \"Light Green\" = \"#c8ee90\",\n                  \"Dark Green\" = \"#66FF66\")) %>%\n    rule_fill_discrete(\n      columns = `Whiff%`,\n      expression = cut(`Whiff%`,\n                       breaks = c(-Inf,20,25,30,35,Inf),\n                       labels = c('Dark Red','Light Red','White','Light Green','Dark Green')),\n      colours = c(\"Dark Red\" = \"#FF6666\",\n                  \"Light Red\" = \"#FFB3B3\",\n                  \"White\" = \"white\",\n                  \"Light Green\" = \"#c8ee90\",\n                  \"Dark Green\" = \"#66FF66\")) %>%\n    rule_fill_discrete(\n      columns = `K%`,\n      expression = cut(`K%`,\n                       breaks = c(-Inf,60,64,65,70,Inf),\n                       labels = c('Dark Red','Light Red','White','Light Green','Dark Green')),\n      colours = c(\"Dark Red\" = \"#FF6666\",\n                  \"Light Red\" = \"#FFB3B3\",\n                  \"White\" = \"white\",\n                  \"Light Green\" = \"#c8ee90\",\n                  \"Dark Green\" = \"#66FF66\")) %>%\n    rule_fill_discrete(\n      columns = `Chase%`,\n      expression = cut(`Chase%`,\n                       breaks = c(-Inf,22,27,32,37,Inf),\n                       labels = c('Dark Red','Light Red','White','Light Green','Dark Green')),\n      colours = c(\"Dark Red\" = \"#FF6666\",\n                  \"Light Red\" = \"#FFB3B3\",\n                  \"White\" = \"white\",\n                  \"Light Green\" = \"#c8ee90\",\n                  \"Dark Green\" = \"#66FF66\")) %>%\n    rule_fill_discrete(\n      columns = `BIPOut%`,\n      expression = cut(`BIPOut%`,\n                       breaks = c(-Inf,60,65,70,75,Inf),\n                       labels = c('Dark Red','Light Red','White','Light Green','Dark Green')),\n      colours = c(\"Dark Red\" = \"#FF6666\",\n                  \"Light Red\" = \"#FFB3B3\",\n                  \"White\" = \"white\",\n                  \"Light Green\" = \"#c8ee90\",\n                  \"Dark Green\" = \"#66FF66\")) %>%\n    rule_fill_discrete(\n      columns = `IZ Whiff%`,\n      expression = cut(`IZ Whiff%`,\n                       breaks = c(-Inf,10,12,15,17,Inf),\n                       labels = c('Dark Red','Light Red','White','Light Green','Dark Green')),\n      colours = c(\"Dark Red\" = \"#FF6666\",\n                  \"Light Red\" = \"#FFB3B3\",\n                  \"White\" = \"white\",\n                  \"Light Green\" = \"#c8ee90\",\n                  \"Dark Green\" = \"#66FF66\")) %>%\n    condformat2grob(draw=FALSE)\n  return(fin)\n}\n\n# Highlight next code till dev.off() and run\npdf(\"UCLA_2024.pdf\", width = 11, height = 8.5)\ntable_list <- list(textGrob(paste0(\"UCLA Sequencing 2024\", sep = \" \"), gp = gpar(fontsize = 15, fontface = \"bold\"),\n                              vjust = 1))\ntypes <- sort(factor(unique(cleaned$TaggedPitchType), levels = pitch_order))\n\nif (length(types) >= 7) {\n  for (p in seq(1,length(types))) {\n    table_list[[length(table_list)+1]] <- textGrob(paste0(\"After \",types[p], sep = \"  \"),gp = gpar(fontsize = 9))\n    ta <- condGrob(after_pitch(cleaned, types[p]), 0.5)\n    h <- rep(0.3, times = nrow(ta))\n    ta$heights <- unit(h, \"cm\")\n    table_list[[length(table_list)+1]] <- ta\n  }\n  table_list[[length(table_list)+1]] <- bot_margin\n  do.call(grid.arrange, c(table_list, list(heights = height_arr7)))\n}  else if (length(types) >= 6) {\n  for (p in seq(1,length(types))) {\n    table_list[[length(table_list)+1]] <- textGrob(paste0(\"After \",types[p], sep = \"  \"),gp = gpar(fontsize = 10))\n    ta <- condGrob(after_pitch(cleaned, types[p]), 0.6)\n    h <- rep(0.4, times = nrow(ta))\n    ta$heights <- unit(h, \"cm\")\n    table_list[[length(table_list)+1]] <- ta\n  }\n  table_list[[length(table_list)+1]] <- bot_margin\n  do.call(grid.arrange, c(table_list, list(heights = height_arr6)))\n} else {\n    for (p in seq(1,length(types))) {\n      table_list[[length(table_list)+1]] <- textGrob(paste0(\"After \",types[p], sep = \"  \"),gp = gpar(fontsize = 12))\n      ta <- condGrob(after_pitch(cleaned, types[p]), 0.8)\n      h <- rep(0.5, times = nrow(ta))\n      ta$heights <- unit(h, \"cm\")\n      table_list[[length(table_list)+1]] <- ta\n    }\n    table_list[[length(table_list)+1]] <- bot_margin\n    do.call(grid.arrange, c(table_list, list(heights = height_arr)))\n}\ndev.off() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nquartz_off_screen \n                2 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(gridExtra)\nlibrary(reshape2)\n\n\ncreate_viz_data <- function() {\n  \n  after_fb <- after_pitch(cleaned, \"Fastball\")\n  after_bb <- after_pitch(cleaned, \"Breaking Ball\")\n  after_os <- after_pitch(cleaned, \"Off-Speed\")\n  \n  \n  after_fb$PreviousPitch <- \"Fastball\"\n  after_bb$PreviousPitch <- \"Breaking Ball\"\n  after_os$PreviousPitch <- \"Off-Speed\"\n  \n  \n  all_data <- rbind(after_fb, after_bb, after_os)\n  \n  \n  colnames(all_data)[1] <- \"NextPitch\"\n  \n  return(all_data)\n}\n\n\nviz_data <- create_viz_data()\n\n\nucla_theme <- theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5),\n    axis.title = element_text(size = 12, face = \"bold\"),\n    axis.text = element_text(size = 10),\n    legend.title = element_text(size = 12, face = \"bold\"),\n    legend.text = element_text(size = 10),\n    strip.text = element_text(size = 12, face = \"bold\")\n  )\n\n# 1. \nswing_plot <- ggplot(viz_data, aes(x = NextPitch, y = `Swing%`, fill = NextPitch)) +\n  geom_bar(stat = \"identity\", width = 0.7) +\n  facet_wrap(~ PreviousPitch, labeller = labeller(PreviousPitch = function(x) paste(\"After\", x))) +\n  labs(\n    title = \"UCLA Pitch Sequencing 2024: Swing Percentage\",\n    subtitle = \"Percentage of swings on each pitch type based on the previous pitch\",\n    x = \"Next Pitch Type\",\n    y = \"Swing Percentage (%)\"\n  ) +\n  scale_fill_manual(values = c(\"Fastball\" = \"#3366CC\", \"Breaking Ball\" = \"#DC3912\", \"Off-Speed\" = \"#FF9900\")) +\n  geom_text(aes(label = sprintf(\"%.1f%%\", `Swing%`)), vjust = -0.5, size = 3.5) +\n  ylim(0, max(viz_data$`Swing%`) * 1.15) +\n  ucla_theme\n\n# 2. \nwhiff_plot <- ggplot(viz_data, aes(x = NextPitch, y = `Whiff%`, fill = NextPitch)) +\n  geom_bar(stat = \"identity\", width = 0.7) +\n  facet_wrap(~ PreviousPitch, labeller = labeller(PreviousPitch = function(x) paste(\"After\", x))) +\n  labs(\n    title = \"UCLA Pitch Sequencing 2024: Whiff Percentage\",\n    subtitle = \"Percentage of whiffs on each pitch type based on the previous pitch\",\n    x = \"Next Pitch Type\",\n    y = \"Whiff Percentage (%)\"\n  ) +\n  scale_fill_manual(values = c(\"Fastball\" = \"#3366CC\", \"Breaking Ball\" = \"#DC3912\", \"Off-Speed\" = \"#FF9900\")) +\n  geom_text(aes(label = sprintf(\"%.1f%%\", `Whiff%`)), vjust = -0.5, size = 3.5) +\n  ylim(0, max(viz_data$`Whiff%`) * 1.15) +\n  ucla_theme\n\n# 3. \nmetrics_data <- viz_data %>%\n  select(NextPitch, PreviousPitch, `Swing%`, `Whiff%`) %>%\n  melt(id.vars = c(\"NextPitch\", \"PreviousPitch\"),\n       variable.name = \"Metric\",\n       value.name = \"Percentage\")\n\ncombined_plot <- ggplot(metrics_data, aes(x = NextPitch, y = Percentage, fill = Metric)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", width = 0.7) +\n  facet_wrap(~ PreviousPitch, labeller = labeller(PreviousPitch = function(x) paste(\"After\", x))) +\n  labs(\n    title = \"UCLA Pitch Sequencing 2024: Swing vs Whiff Percentage\",\n    subtitle = \"Comparison of swing and whiff percentages by pitch sequence\",\n    x = \"Next Pitch Type\",\n    y = \"Percentage (%)\"\n  ) +\n  scale_fill_manual(values = c(\"Swing%\" = \"#3366CC\", \"Whiff%\" = \"#DC3912\"),\n                    labels = c(\"Swing%\", \"Whiff%\")) +\n  geom_text(aes(label = sprintf(\"%.1f%%\", Percentage)), \n            position = position_dodge(width = 0.7), \n            vjust = -0.5, \n            size = 3) +\n  ylim(0, max(metrics_data$Percentage) * 1.15) +\n  ucla_theme\n\n# 4. \nratio_data <- viz_data %>%\n  mutate(WhiffSwingRatio = `Whiff%` / `Swing%` * 100) %>%\n  select(NextPitch, PreviousPitch, WhiffSwingRatio, `#`)\n\nratio_plot <- ggplot(ratio_data, aes(x = NextPitch, y = WhiffSwingRatio, fill = NextPitch)) +\n  geom_bar(stat = \"identity\", width = 0.7) +\n  facet_wrap(~ PreviousPitch, labeller = labeller(PreviousPitch = function(x) paste(\"After\", x))) +\n  labs(\n    title = \"UCLA Pitch Sequencing 2024: Whiff-to-Swing Ratio\",\n    subtitle = \"Percentage of swings that result in whiffs (higher values indicate more effective pitches)\",\n    x = \"Next Pitch Type\",\n    y = \"Whiff/Swing Ratio (%)\"\n  ) +\n  scale_fill_manual(values = c(\"Fastball\" = \"#3366CC\", \"Breaking Ball\" = \"#DC3912\", \"Off-Speed\" = \"#FF9900\")) +\n  geom_text(aes(label = sprintf(\"%.1f%%\", WhiffSwingRatio)), vjust = -0.5, size = 3.5) +\n  ylim(0, max(ratio_data$WhiffSwingRatio) * 1.15) +\n  ucla_theme\n\n# 5. \ntop_sequences <- viz_data %>%\n  select(PreviousPitch, NextPitch, `#`, `%`, `Swing%`, `Whiff%`, `Chase%`) %>%\n  arrange(desc(`Whiff%`)) %>%\n  mutate(Sequence = paste(PreviousPitch, \"→\", NextPitch)) %>%\n  mutate(EffectivenessTier = case_when(\n    `Whiff%` >= 35 ~ \"Excellent\",\n    `Whiff%` >= 25 ~ \"Good\",\n    `Whiff%` >= 20 ~ \"Average\",\n    TRUE ~ \"Below Average\"\n  ))\n\neffectiveness_plot <- ggplot(top_sequences, aes(x = reorder(Sequence, `Whiff%`), y = `Whiff%`, fill = EffectivenessTier)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(\n    title = \"UCLA Pitch Sequencing 2024: Most Effective Sequences\",\n    subtitle = \"Ranked by whiff percentage\",\n    x = \"Pitch Sequence\",\n    y = \"Whiff Percentage (%)\"\n  ) +\n  scale_fill_manual(values = c(\"Excellent\" = \"#66FF66\", \"Good\" = \"#c8ee90\", \"Average\" = \"#FFB3B3\", \"Below Average\" = \"#FF6666\")) +\n  geom_text(aes(label = sprintf(\"%.1f%%\", `Whiff%`)), hjust = -0.2, size = 3.5) +\n  ylim(0, max(top_sequences$`Whiff%`) * 1.2) +\n  ucla_theme\n\n# 6.\nchase_plot <- ggplot(viz_data, aes(x = NextPitch, y = `Chase%`, fill = NextPitch)) +\n  geom_bar(stat = \"identity\", width = 0.7) +\n  facet_wrap(~ PreviousPitch, labeller = labeller(PreviousPitch = function(x) paste(\"After\", x))) +\n  labs(\n    title = \"UCLA Pitch Sequencing 2024: Chase Percentage\",\n    subtitle = \"Percentage of swings at pitches outside the zone based on the previous pitch\",\n    x = \"Next Pitch Type\",\n    y = \"Chase Percentage (%)\"\n  ) +\n  scale_fill_manual(values = c(\"Fastball\" = \"#3366CC\", \"Breaking Ball\" = \"#DC3912\", \"Off-Speed\" = \"#FF9900\")) +\n  geom_text(aes(label = sprintf(\"%.1f%%\", `Chase%`)), vjust = -0.5, size = 3.5) +\n  ylim(0, max(viz_data$`Chase%`) * 1.15) +\n  ucla_theme\n\n# Function to save all plots to a PDF\nsave_all_plots <- function() {\n  pdf(\"UCLA_Pitch_Sequencing_Visualizations.pdf\", width = 11, height = 8.5)\n  print(swing_plot)\n  print(whiff_plot)\n  print(combined_plot)\n  print(ratio_plot)\n  print(effectiveness_plot)\n  print(chase_plot)\n  dev.off()\n}\n\n\ngenerate_insights <- function() {\n  \n  best_sequence <- top_sequences[which.max(top_sequences$`Whiff%`),]\n  \n  \n  best_chase <- viz_data[which.max(viz_data$`Chase%`),]\n  \n  \n  summary_by_prev <- viz_data %>%\n    group_by(PreviousPitch) %>%\n    summarise(\n      AvgWhiff = mean(`Whiff%`),\n      AvgSwing = mean(`Swing%`),\n      AvgChase = mean(`Chase%`)\n    )\n  \n  \n  summary_by_next <- viz_data %>%\n    group_by(NextPitch) %>%\n    summarise(\n      AvgWhiff = mean(`Whiff%`),\n      AvgSwing = mean(`Swing%`),\n      AvgChase = mean(`Chase%`)\n    )\n  \n  cat(\"=====================================================\\n\")\n  cat(\"UCLA PITCH SEQUENCING ANALYSIS - KEY INSIGHTS\\n\")\n  cat(\"=====================================================\\n\\n\")\n  \n  cat(\"MOST EFFECTIVE SEQUENCES:\\n\")\n  cat(\"- Highest Whiff%: \", best_sequence$PreviousPitch, \"→\", best_sequence$NextPitch, \n      \" (\", sprintf(\"%.1f%%\", best_sequence$`Whiff%`), \")\\n\", sep=\"\")\n  cat(\"- Highest Chase%: \", best_chase$PreviousPitch, \"→\", best_chase$NextPitch, \n      \" (\", sprintf(\"%.1f%%\", best_chase$`Chase%`), \")\\n\\n\", sep=\"\")\n  \n  cat(\"EFFECTIVENESS BY PREVIOUS PITCH:\\n\")\n  print(summary_by_prev)\n  cat(\"\\n\")\n  \n  cat(\"EFFECTIVENESS BY PITCH TYPE:\\n\")\n  print(summary_by_next)\n}\n\n\nswing_plot\n```\n\n::: {.cell-output-display}\n![](project1_files/figure-html/cars-1.png){width=672}\n:::\n\n```{.r .cell-code}\nwhiff_plot\n```\n\n::: {.cell-output-display}\n![](project1_files/figure-html/cars-2.png){width=672}\n:::\n\n```{.r .cell-code}\ncombined_plot\n```\n\n::: {.cell-output-display}\n![](project1_files/figure-html/cars-3.png){width=672}\n:::\n\n```{.r .cell-code}\nratio_plot\n```\n\n::: {.cell-output-display}\n![](project1_files/figure-html/cars-4.png){width=672}\n:::\n\n```{.r .cell-code}\neffectiveness_plot\n```\n\n::: {.cell-output-display}\n![](project1_files/figure-html/cars-5.png){width=672}\n:::\n\n```{.r .cell-code}\nchase_plot\n```\n\n::: {.cell-output-display}\n![](project1_files/figure-html/cars-6.png){width=672}\n:::\n\n```{.r .cell-code}\nsave_all_plots()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nquartz_off_screen \n                2 \n```\n\n\n:::\n\n```{.r .cell-code}\ngenerate_insights()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====================================================\nUCLA PITCH SEQUENCING ANALYSIS - KEY INSIGHTS\n=====================================================\n\nMOST EFFECTIVE SEQUENCES:\n- Highest Whiff%: Breaking Ball→3 (40.4%)\n- Highest Chase%: Off-Speed→3 (41.5%)\n\nEFFECTIVENESS BY PREVIOUS PITCH:\n# A tibble: 3 × 4\n  PreviousPitch AvgWhiff AvgSwing AvgChase\n  <chr>            <dbl>    <dbl>    <dbl>\n1 Breaking Ball     29.5     48.1     31.2\n2 Fastball          21.9     47.3     29.5\n3 Off-Speed         24.6     49.5     30.4\n\nEFFECTIVENESS BY PITCH TYPE:\n# A tibble: 3 × 4\n  NextPitch     AvgWhiff AvgSwing AvgChase\n  <fct>            <dbl>    <dbl>    <dbl>\n1 Fastball          18.7     48.9     25.2\n2 Breaking Ball     23.8     45.2     29.2\n3 Off-Speed         33.5     50.9     36.6\n```\n\n\n:::\n:::\n",
    "supporting": [
      "project1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}